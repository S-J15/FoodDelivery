/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2024-09-23 06:24:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import servlets.OrderSummary;
import servlets.Product;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;

public final class orderHistory_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Order History</title>\r\n");
      out.write("    <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Roboto', sans-serif;\r\n");
      out.write("            background-color: #1e1e2f; /* Dark background */\r\n");
      out.write("            color: #f8f9fa; /* Light text color */\r\n");
      out.write("        }\r\n");
      out.write("        .continue-shopping {\r\n");
      out.write("            margin-bottom: 20px; /* Space below continue shopping button */\r\n");
      out.write("            background-color: #28a745; /* Green background */\r\n");
      out.write("            border-color: #28a745; /* Green border */\r\n");
      out.write("            transition: background-color 0.3s, transform 0.3s; /* Transition effects */\r\n");
      out.write("        }\r\n");
      out.write("        .continue-shopping:hover {\r\n");
      out.write("            background-color: #218838; /* Darker green on hover */\r\n");
      out.write("            transform: translateY(-2px); /* Slight lift effect */\r\n");
      out.write("        }\r\n");
      out.write("        .order-block {\r\n");
      out.write("            background-color: #2a2a45; /* Darker card background */\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("            box-shadow: 0 4px 8px rgba(255, 255, 255, 0.1);\r\n");
      out.write("        }\r\n");
      out.write("        .order-title {\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            font-size: 1.5rem;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("            color: #f8f9fa; /* Light color for headings */\r\n");
      out.write("            display: inline-block; /* Make title inline */\r\n");
      out.write("        }\r\n");
      out.write("        .total-amount {\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            font-size: 1.8rem; /* Increased font size for total amount */\r\n");
      out.write("            color: #28a745; /* Green for total amount */\r\n");
      out.write("            float: right; /* Align to the right */\r\n");
      out.write("        }\r\n");
      out.write("        .product-item {\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            margin: 5px;\r\n");
      out.write("            background-color: #3b3b58; /* Lighter card background */\r\n");
      out.write("            transition: transform 0.3s, box-shadow 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("        .product-item:hover {\r\n");
      out.write("            transform: translateY(-5px);\r\n");
      out.write("            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container mt-5\">\r\n");
      out.write("        <a href=\"home.jsp\" class=\"btn continue-shopping\">\r\n");
      out.write("            <i class=\"fas fa-shopping-cart\"></i> Continue Shopping\r\n");
      out.write("        </a>\r\n");
      out.write("        <h1 class=\"text-center\">Order History</h1>\r\n");
      out.write("        ");

            List<OrderSummary> orderHistory = (List<OrderSummary>) request.getSession().getAttribute("orderHistory");
            Map<Integer, Product> orderedProductsMap = (Map<Integer, Product>) request.getAttribute("orderedProductsMap");
            DecimalFormat df = new DecimalFormat("#.00");
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");

            if (orderHistory != null && !orderHistory.isEmpty()) {
                for (OrderSummary order : orderHistory) {
                    Map<Integer, Integer> products = order.getProducts();
                    double totalAmount = order.getTotalAmount();
                    Date orderDate = order.getOrderDate();
        
      out.write("\r\n");
      out.write("                    <div class=\"order-history\">\r\n");
      out.write("                        <div class=\"order-block\">\r\n");
      out.write("                            <div class=\"d-flex justify-content-between align-items-center\">\r\n");
      out.write("                                <div class=\"order-title\">Order Summary</div>\r\n");
      out.write("                                <div class=\"total-amount\">$");
      out.print( df.format(totalAmount) );
      out.write("</div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                            <div class=\"row\">\r\n");
      out.write("                                <div class=\"col-md-12\">\r\n");
      out.write("                                    <div class=\"row\">\r\n");
      out.write("                                        ");

                                        for (Map.Entry<Integer, Integer> entry : products.entrySet()) {
                                            int productId = entry.getKey();
                                            int quantity = entry.getValue();
                                            
                                            // Safely retrieve the product from the orderedProductsMap
                                            Product product = (orderedProductsMap != null) ? orderedProductsMap.get(productId) : null;
                                            
                                            if (product != null) {
                                                double itemTotal = product.getPrice() * quantity;
                                        
      out.write("\r\n");
      out.write("                                            <div class=\"col-md-4 product-item\">\r\n");
      out.write("                                                <strong>Product:</strong> ");
      out.print( product.getName() );
      out.write(" <br>\r\n");
      out.write("                                                <strong>Quantity:</strong> ");
      out.print( quantity );
      out.write(" <br>\r\n");
      out.write("                                                <strong>Price:</strong> $");
      out.print( df.format(product.getPrice()) );
      out.write(" <br>\r\n");
      out.write("                                                <strong>Total:</strong> $");
      out.print( df.format(itemTotal) );
      out.write(" <br>\r\n");
      out.write("                                            </div>\r\n");
      out.write("                                        ");

                                            }
                                        }
                                        
      out.write("\r\n");
      out.write("                                    </div>\r\n");
      out.write("                                    <div>Date: ");
      out.print( sdf.format(orderDate) );
      out.write("</div>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("        ");

                }
            } else {
        
      out.write("\r\n");
      out.write("            <div class=\"alert alert-warning text-center\">You have no order history.</div>\r\n");
      out.write("        ");

            }
        
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
